name: Sync n' Build

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter the version manually (or fallback to latest if invalid)'
        required: true 
        default: 'manual-build'

jobs:
  sync-with-upstream:
    runs-on: ubuntu-latest
    outputs:
      changes-detected: ${{ steps.check.outputs.changes }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/khcrysalis/Feather.git
          git fetch upstream

      - name: Merge upstream/main (favor theirs)
        run: |
          git merge upstream/main --allow-unrelated-histories --no-edit || true
          if [ -n "$(git ls-files -u)" ]; then
            echo "Conflicts detected. Favoring upstream..."
            git checkout --theirs .
            git add .
            git commit -m "Merge upstream (auto-resolved with theirs)"
          fi

      - name: Check if new commits were added
        id: check
        run: |
          git fetch origin
          if [ "$(git rev-parse HEAD)" = "$(git rev-parse origin/main)" ]; then
            echo "No new changes."
            echo "changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "New changes detected."
            git push origin main
            echo "changes=true" >> "$GITHUB_OUTPUT"
          fi

  build-feather:
    needs: sync-with-upstream
    if: github.event_name == 'workflow_dispatch' || needs.sync-with-upstream.outputs.changes-detected == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'

      - name: Set metadata
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "TAG=featherrelease-${SHORT_SHA}" >> "$GITHUB_ENV"
          echo "RELEASE_NAME=Automagic Release $SHORT_SHA" >> "$GITHUB_ENV"
          echo "ARCHIVE_NAME=Feather" >> "$GITHUB_ENV"
          echo "OUTPUT_NAME=Feather-v2.ipa" >> "$GITHUB_ENV"

      - name: Archive Build (Unsigned)
        run: |
          xcodebuild clean archive \
            -project Feather.xcodeproj \
            -scheme Feather \
            -configuration Release \
            -archivePath build/${{ env.ARCHIVE_NAME }}.xcarchive \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            ONLY_ACTIVE_ARCH=YES \
            ARCHS=arm64 \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_OPTIMIZATION_LEVEL="-Owholemodule" \
            IPHONEOS_DEPLOYMENT_TARGET=17.4 \
            -skipPackagePluginValidation

      - name: Create unsigned IPA
        run: |
          mkdir -p build/Payload
          APP_PATH="build/${{ env.ARCHIVE_NAME }}.xcarchive/Products/Applications/Feather.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "App not found at expected path: $APP_PATH"
            exit 1
          fi
          cp -R "$APP_PATH" build/Payload/
          cd build
          zip -r "${{ env.OUTPUT_NAME }}" Payload

      - name: Upload IPA (Create or Update Release)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.RELEASE_NAME }}
          files: build/${{ env.OUTPUT_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-altstore-repo:
    needs: build-feather
    if: needs.build-feather.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p public
          VERSION="${{ github.event.inputs.version || github.ref_name || 'automagic' }}"

          RELEASE_METADATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${VERSION}")

          if echo "$RELEASE_METADATA" | jq -e '.id' > /dev/null 2>&1; then
            RELEASE_ID=$(echo "$RELEASE_METADATA" | jq -r '.id')
          else
            echo "No release found for tag: $VERSION. Falling back to latest."
            RELEASE_METADATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            RELEASE_ID=$(echo "$RELEASE_METADATA" | jq -r '.id')
          fi

          echo "Using release ID: $RELEASE_ID"

          ASSETS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" | jq -c '.[] | select(.name | endswith(".ipa"))')

          echo "$ASSETS" | while read -r asset; do
            NAME=$(echo "$asset" | jq -r '.name')
            DOWNLOAD_URL=$(echo "$asset" | jq -r '.url')
            curl -L -H "Authorization: token $GITHUB_TOKEN" \
                 -H "Accept: application/octet-stream" \
                 "$DOWNLOAD_URL" -o "public/$NAME"
          done

      - name: Generate apps.json
        run: |
          DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          VERSION="${{ github.event.inputs.version || 'automagic' }}"
          echo '{
            "name": "Feather Automagic Repo",
            "identifier": "pidev.feather",
            "iconURL": "https://ratsknarp.github.io/featherstar/featherpurp.png",
            "apps": [' > public/apps.json

          echo '{
              "name": "Feather v2",
              "bundleIdentifier": "thewonderofyou.Feather",
              "developerName": "Samara",
              "version": "'"$VERSION"'",
              "versionDate": "'"$DATE"'",
              "downloadURL": "https://ratsknarp.github.io/featherstar/Feather-v2.ipa",
              "iconURL": "https://ratsknarp.github.io/featherstar/feather.png",
              "localizedDescription": "Automagic build of Feather with the combined functionality of vapor webserver and idevice.",
              "subtitle": "Feather v2",
              "tintColor": "0099ff",
              "size": 0
            }
          ]}' >> public/apps.json

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
